<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use App\Models\ScheduleTemplateTrip;

class ScheduleTemplateTripSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // L·∫•y danh s√°ch routes v√† buses c√≥ s·∫µn
        $routes = DB::table('routes')->get();
        $buses = DB::table('buses')->get();

        if ($routes->isEmpty() || $buses->isEmpty()) {
            $this->command->warn('Kh√¥ng c√≥ routes ho·∫∑c buses ƒë·ªÉ t·∫°o l·ªãch tr√¨nh m·∫´u!');
            return;
        }

        // ƒê·ªãnh nghƒ©a l·ªãch tr√¨nh m·∫´u t·ª´ th·ª© 2 ƒë·∫øn ch·ªß nh·∫≠t
        $schedules = [
            // Th·ª© 2 (weekday = 1)
            [
                'weekday' => 1,
                'departure_times' => ['06:00:00', '08:00:00', '10:00:00', '14:00:00', '16:00:00', '18:00:00', '20:00:00']
            ],
            // Th·ª© 3 (weekday = 2)
            [
                'weekday' => 2,
                'departure_times' => ['06:30:00', '08:30:00', '10:30:00', '14:30:00', '16:30:00', '18:30:00', '20:30:00']
            ],
            // Th·ª© 4 (weekday = 3)
            [
                'weekday' => 3,
                'departure_times' => ['07:00:00', '09:00:00', '11:00:00', '15:00:00', '17:00:00', '19:00:00', '21:00:00']
            ],
            // Th·ª© 5 (weekday = 4)
            [
                'weekday' => 4,
                'departure_times' => ['07:30:00', '09:30:00', '11:30:00', '15:30:00', '17:30:00', '19:30:00', '21:30:00']
            ],
            // Th·ª© 6 (weekday = 5)
            [
                'weekday' => 5,
                'departure_times' => ['08:00:00', '10:00:00', '12:00:00', '16:00:00', '18:00:00', '20:00:00', '22:00:00']
            ],
            // Th·ª© 7 (weekday = 6)
            [
                'weekday' => 6,
                'departure_times' => ['08:30:00', '10:30:00', '12:30:00', '16:30:00', '18:30:00', '20:30:00', '22:30:00']
            ],
            // Ch·ªß nh·∫≠t (weekday = 0)
            [
                'weekday' => 0,
                'departure_times' => ['09:00:00', '11:00:00', '13:00:00', '17:00:00', '19:00:00', '21:00:00', '23:00:00']
            ],
        ];

        $createdCount = 0;
        $skippedCount = 0;

        foreach ($schedules as $schedule) {
            $weekday = $schedule['weekday'];
            
            foreach ($schedule['departure_times'] as $departureTime) {
                // Lu√¢n phi√™n gi·ªØa c√°c routes v√† buses ƒë·ªÉ t·∫°o ƒëa d·∫°ng
                $routeIndex = ($createdCount % $routes->count());
                $busIndex = ($createdCount % $buses->count());
                
                $route = $routes[$routeIndex];
                $bus = $buses[$busIndex];

                // Ki·ªÉm tra xem l·ªãch tr√¨nh n√†y ƒë√£ t·ªìn t·∫°i ch∆∞a
                $exists = ScheduleTemplateTrip::where('route_id', $route->id)
                    ->where('bus_id', $bus->id)
                    ->where('weekday', $weekday)
                    ->where('departure_time', $departureTime)
                    ->exists();

                if (!$exists) {
                    try {
                        ScheduleTemplateTrip::create([
                            'route_id' => $route->id,
                            'bus_id' => $bus->id,
                            'weekday' => $weekday,
                            'departure_time' => $departureTime,
                            'active' => true,
                        ]);
                        
                        $createdCount++;
                        
                        $this->command->info("‚úì T·∫°o l·ªãch tr√¨nh: {$route->name} - Xe {$bus->code} - Th·ª© {$weekday} - {$departureTime}");
                        
                    } catch (\Exception $e) {
                        $this->command->error("‚úó L·ªói t·∫°o l·ªãch tr√¨nh: {$e->getMessage()}");
                    }
                } else {
                    $skippedCount++;
                }
            }
        }

        $this->command->info("Seeder ho√†n th√†nh!");
        $this->command->info("‚úì ƒê√£ t·∫°o: {$createdCount} l·ªãch tr√¨nh m·∫´u");
        $this->command->info("‚úì ƒê√£ b·ªè qua: {$skippedCount} l·ªãch tr√¨nh (ƒë√£ t·ªìn t·∫°i)");
        
        // Hi·ªÉn th·ªã th·ªëng k√™ theo ng√†y
        $this->displayScheduleSummary();
    }

    /**
     * Hi·ªÉn th·ªã th·ªëng k√™ l·ªãch tr√¨nh theo ng√†y
     */
    private function displayScheduleSummary(): void
    {
        $this->command->info("\nüìä TH·ªêNG K√ä L·ªäCH TR√åNH THEO NG√ÄY:");
        
        $weekdayNames = ['Ch·ªß nh·∫≠t', 'Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7'];
        
        for ($weekday = 0; $weekday <= 6; $weekday++) {
            $count = ScheduleTemplateTrip::where('weekday', $weekday)->count();
            $weekdayName = $weekdayNames[$weekday];
            
            $this->command->info("  {$weekdayName}: {$count} chuy·∫øn");
        }
        
        $total = ScheduleTemplateTrip::count();
        $this->command->info("  T·ªïng c·ªông: {$total} chuy·∫øn");
    }
}
